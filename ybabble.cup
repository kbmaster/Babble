import java_cup.runtime.*;
import java.util.*;
   
parser code {:
    
    	public void report_error(String message, Object info) 
	{
   
                StringBuilder m = new StringBuilder("Error");
    
	        if (info instanceof java_cup.runtime.Symbol) 
		{
                        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
                        if (s.left >= 0) {                
                                m.append(" in line "+(s.left+1));   
                
		        if (s.right >= 0)                    
                                m.append(", column "+(s.right+1));
            	}
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }
   
     public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

   //////////////////////////////////////////////////////////	

	private BabbleGrammar __grammar=null;
	public BabbleGrammar getGrammar()
	{
		return this.__grammar;
	}


:};
   

/////////////////////////////////////////////////////////////////////////////


terminal String TERMINAL,ARROW,PROB,EOL,PIPE,NOTERMINAL,LPARENT,RPARENT,ZERO_ONE,ZERO_MORE,ONE_MORE,CONCAT,IGNORE;
terminal Double PROBVAL;

non terminal BabbleGrammar  	GRAMMAR;
non terminal String 		HEAD;
non terminal List  		TAILS;
non terminal Tail  		TAIL;
nonterminal  List 		SIMBOLS;
nonterminal  BabbleSymbol 	SIMBOL;
non terminal RTree 		REGEX;
non terminal RTree 		EXP;
non terminal List 		IGNORE_TAILS;
non terminal Tail		IGNORE_TAIL;

precedence left PIPE;
precedence left CONCAT;
precedence left ZERO_MORE,ONE_MORE,ZERO_ONE;


GRAMMAR		::=	HEAD:h ARROW TAILS:t EOL {:RESULT= new BabbleGrammar();  RESULT.add(h,t); __grammar=RESULT;:} | 
			GRAMMAR:g HEAD:h ARROW TAILS:t EOL {: g.add(h,t); RESULT=g;:} |
			GRAMMAR:g IGNORE:i ARROW IGNORE_TAILS:it EOL {: g.add("_",it);RESULT=g;:};

HEAD  		::= 	NOTERMINAL:n {:RESULT= new String(n);:};

TAILS		::=	TAIL:t {:RESULT=new ArrayList(); RESULT.add(t);:} | 
			TAILS:ts PIPE TAIL:t {:ts.add(t); RESULT=ts;:};

TAIL		::=     REGEX:r {: RESULT=new RegexTail(r);:}| 
			REGEX:r PROB PROBVAL:p {:RESULT= new RegexTail(r,p);:}|
			SIMBOLS:s {: RESULT= new SymbolTail(s);:}|
			SIMBOLS:s PROB PROBVAL:p {: RESULT= new SymbolTail(s,p);:};

SIMBOLS  	::= 	SIMBOL:s {:RESULT=new ArrayList(); RESULT.add(s);:} | 
			SIMBOLS:ss  SIMBOL:s {:ss.add(s); RESULT=ss;:};

SIMBOL  	::= 	TERMINAL:t {:RESULT=new Terminal(t);:} | 
			NOTERMINAL:n {:RESULT=new NoTerminal(n);:};

REGEX		::=  	LPARENT EXP:e RPARENT {: RESULT=e;:};  
EXP             ::=	EXP:e1 PIPE EXP:e2 {:RESULT=new RTree("|"); RESULT.add(e1); RESULT.add(e2);:}|
                     	EXP:e ZERO_MORE {:RESULT=new RTree("*"); RESULT.add(e);:}|
			EXP:e ONE_MORE {:RESULT=new RTree("+"); RESULT.add(e);:}|
                      	EXP:e ZERO_ONE {:RESULT=new RTree("?"); RESULT.add(e);:}|
                      	LPARENT EXP:e RPARENT {:RESULT=new RTree("()"); RESULT.add(e);:} |
                      	EXP:e1 EXP:e2 {:RESULT=new RTree("."); RESULT.add(e1); RESULT.add(e2);:} %prec CONCAT|
                      	TERMINAL:t {: RESULT= new RTree(t);:};

//ignore
IGNORE_TAILS    ::= 	IGNORE_TAIL:t {:RESULT=new ArrayList(); RESULT.add(t);:} |
                        IGNORE_TAILS:ts PIPE IGNORE_TAIL:t {:ts.add(t); RESULT=ts;:};

IGNORE_TAIL	::=	TERMINAL:t {: 
					List<BabbleSymbol> s = new ArrayList();
					Terminal st = new Terminal(t);	
					s.add(st);

					RESULT=new SymbolTail(s); 
					
				    :};




